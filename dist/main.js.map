{"version":3,"sources":["../main.js"],"names":["baseURL","getEndpoint","id","type","limit","offset","query","stringify","encode","resolve","encodeURIComponent","City","parts","split","country","city","pop","Promise","reject","options","url","json","headers","then","result","data","map","Sight","name","sight","attributes","address","street","hours_string","price_string","review","catch","parameters","Object","assign","LonelyPlanet","$","load","body","href","attr"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,UAAU,+BAAhB;;AAEA,SAASC,WAAT,CAAqBC,EAArB,EAAoE;AAAA,QAA3CC,IAA2C,uEAApC,QAAoC;AAAA,QAA1BC,KAA0B,uEAAlB,IAAkB;AAAA,QAAZC,MAAY,uEAAH,CAAG;;AAChE,QAAMC,QAAQ,aAAGC,SAAH,CAAa;AACvB,yCAAiCJ,IADV;AAEvB,+CAAuCD,EAFhB;AAGvB,uBAAeE,KAHQ;AAIvB,wBAAgBC;AAJO,KAAb,EAKX,EAACG,QAAQ,KAAT,EALW,CAAd;;AAOA,WAAO,cAAIC,OAAJ,CAAYT,OAAZ,EAAqB,eAAaE,EAAb,kBAA8BQ,mBAAmB,WAAWJ,KAA9B,CAAnD,CAAP;AACH;;IAEKK,I;AACF,kBAAYT,EAAZ,EAAgBI,KAAhB,EAAuB;AAAA;;AACnB,YAAIM,QAAQN,MAAMO,KAAN,CAAY,GAAZ,CAAZ;;AAEA,aAAKX,EAAL,GAAUA,EAAV;AACA,aAAKY,OAAL,GAAeF,MAAM,CAAN,CAAf;AACA,aAAKG,IAAL,GAAYH,MAAMI,GAAN,EAAZ;AACH;;;;iCAEQ;AAAA;;AACL,mBAAO,IAAIC,OAAJ,CAAY,UAACR,OAAD,EAAUS,MAAV,EAAqB;AACpC,oBAAMC,UAAU;AACZC,yBAAKnB,YAAY,MAAKC,EAAjB,CADO;AAEZmB,0BAAM,IAFM;AAGZC,6BAAS;AACL,wCAAgB;AADX;AAHG,iBAAhB;;AAQA,8CAAGH,OAAH,EACKI,IADL,CACU,kBAAU;AACZd,4BAAQe,OAAOC,IAAP,CAAYC,GAAZ,CAAgB,iBAAS;AAC7B,+BAAO,IAAIC,KAAJ,QAAgB;AACnBC,kCAAMC,MAAMC,UAAN,CAAiBF,IADJ;AAEnBG,qCAASF,MAAMC,UAAN,CAAiBC,OAAjB,CAAyBC,MAFf;AAGnBC,0CAAcJ,MAAMC,UAAN,CAAiBG,YAHZ;AAInBC,0CAAcL,MAAMC,UAAN,CAAiBI,YAJZ;AAKnBC,oCAAQN,MAAMC,UAAN,CAAiBK;AALN,yBAAhB,CAAP;AAOH,qBARO,CAAR;AASH,iBAXL,EAYKC,KAZL,CAYWlB,MAZX;AAaH,aAtBM,CAAP;AAuBH;;;;;;IAGCS,K,GACF,eAAYZ,IAAZ,EAAkBsB,UAAlB,EAA8B;AAAA;;AAC1BC,WAAOC,MAAP,CAAc,IAAd,EAAoB,EAACxB,UAAD,EAApB,EAA4BsB,UAA5B;AACH,C;;IAGgBG,Y;;;;;;;6BACZlC,K,EAAO;AACR,mBAAO,IAAIW,OAAJ,CAAY,UAACR,OAAD,EAAUS,MAAV,EAAqB;AACpC,8CAAGlB,UAAUM,KAAb,EACKiB,IADL,CACU,gBAAQ;AACV,wBAAMkB,IAAI,kBAAQC,IAAR,CAAaC,IAAb,CAAV;AACA,wBAAMC,OAAOH,EAAE,eAAF,EAAmBI,IAAnB,CAAwB,MAAxB,CAAb;;AAEA,wBAAID,IAAJ,EACInC,QAAQ,IAAIE,IAAJ,CAASiC,KAAK/B,KAAL,CAAW,GAAX,EAAgBG,GAAhB,EAAT,EAAgCV,KAAhC,CAAR;AACP,iBAPL,EAQK8B,KARL,CAQWlB,MARX;AASH,aAVM,CAAP;AAWH;;;;;;kBAbgBsB,Y","file":"main.js","sourcesContent":["import qs from 'qs';\r\nimport url from 'url';\r\nimport cheerio from 'cheerio';\r\nimport rp from 'request-promise';\r\n\r\nconst baseURL = 'https://www.lonelyplanet.com/';\r\n\r\nfunction getEndpoint(id, type = 'sights', limit = 1000, offset = 0) {\r\n    const query = qs.stringify({\r\n        'filter[poi][poi_type][equals]': type,\r\n        'filter[poi][place_id][has_ancestor]': id,\r\n        'page[limit]': limit,\r\n        'page[offset]': offset\r\n    }, {encode: false});\r\n\r\n    return url.resolve(baseURL, `a/poi-sig/${id}?resource=` + encodeURIComponent('/pois?' + query))\r\n}\r\n\r\nclass City {\r\n    constructor(id, query) {\r\n        let parts = query.split('/');\r\n\r\n        this.id = id;\r\n        this.country = parts[0];\r\n        this.city = parts.pop();\r\n    }\r\n\r\n    sights() {\r\n        return new Promise((resolve, reject) => {\r\n            const options = {\r\n                url: getEndpoint(this.id),\r\n                json: true,\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            };\r\n\r\n            rp(options)\r\n                .then(result => {\r\n                    resolve(result.data.map(sight => {\r\n                        return new Sight(this, {\r\n                            name: sight.attributes.name,\r\n                            address: sight.attributes.address.street,\r\n                            hours_string: sight.attributes.hours_string,\r\n                            price_string: sight.attributes.price_string,\r\n                            review: sight.attributes.review,\r\n                        })\r\n                    }));\r\n                })\r\n                .catch(reject)\r\n        })\r\n    }\r\n}\r\n\r\nclass Sight {\r\n    constructor(city, parameters) {\r\n        Object.assign(this, {city}, parameters);\r\n    }\r\n}\r\n\r\nexport default class LonelyPlanet {\r\n    city(query) {\r\n        return new Promise((resolve, reject) => {\r\n            rp(baseURL + query)\r\n                .then(body => {\r\n                    const $ = cheerio.load(body);\r\n                    const href = $('.sights__more').attr('href');\r\n\r\n                    if (href)\r\n                        resolve(new City(href.split('/').pop(), query));\r\n                })\r\n                .catch(reject)\r\n        })\r\n    }\r\n}"]}