{"version":3,"sources":["../main.js"],"names":["baseURL","getEndpoint","id","type","limit","offset","query","stringify","encode","resolve","encodeURIComponent","City","parts","split","country","city","pop","Promise","reject","options","url","json","headers","then","result","data","map","Sight","name","sight","attributes","address","street","hours_string","price_string","review","catch","parameters","Object","assign","LonelyPlanet","$","load","body","href","attr","Error"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,UAAU,+BAAhB;;AAEA,SAASC,WAAT,CAAqBC,EAArB,EAAoE;AAAA,MAA3CC,IAA2C,uEAApC,QAAoC;AAAA,MAA1BC,KAA0B,uEAAlB,IAAkB;AAAA,MAAZC,MAAY,uEAAH,CAAG;;AAClE,MAAMC,QAAQ,aAAGC,SAAH,CAAa;AACzB,qCAAiCJ,IADR;AAEzB,2CAAuCD,EAFd;AAGzB,mBAAeE,KAHU;AAIzB,oBAAgBC;AAJS,GAAb,EAKX,EAACG,QAAQ,KAAT,EALW,CAAd;;AAOA,SAAO,cAAIC,OAAJ,CAAYT,OAAZ,EAAqB,eAAaE,EAAb,kBAA8BQ,mBAAmB,WAAWJ,KAA9B,CAAnD,CAAP;AACD;;IAEKK,I;AACJ,gBAAYT,EAAZ,EAAgBI,KAAhB,EAAuB;AAAA;;AACrB,QAAIM,QAAQN,MAAMO,KAAN,CAAY,GAAZ,CAAZ;;AAEA,SAAKX,EAAL,GAAUA,EAAV;AACA,SAAKY,OAAL,GAAeF,MAAM,CAAN,CAAf;AACA,SAAKG,IAAL,GAAYH,MAAMI,GAAN,EAAZ;AACD;;;;6BAEQ;AAAA;;AACP,aAAO,IAAIC,OAAJ,CAAY,UAACR,OAAD,EAAUS,MAAV,EAAqB;AACtC,YAAMC,UAAU;AACdC,eAAKnB,YAAY,MAAKC,EAAjB,CADS;AAEdmB,gBAAM,IAFQ;AAGdC,mBAAS;AACP,4BAAgB;AADT;AAHK,SAAhB;;AAQA,sCAAGH,OAAH,EAAYI,IAAZ,CAAiB,kBAAU;AACzBd,kBAAQe,OAAOC,IAAP,CAAYC,GAAZ,CAAgB,iBAAS;AAC/B,mBAAO,IAAIC,KAAJ,QAAgB;AACrBC,oBAAMC,MAAMC,UAAN,CAAiBF,IADF;AAErBG,uBAASF,MAAMC,UAAN,CAAiBC,OAAjB,CAAyBC,MAFb;AAGrBC,4BAAcJ,MAAMC,UAAN,CAAiBG,YAHV;AAIrBC,4BAAcL,MAAMC,UAAN,CAAiBI,YAJV;AAKrBC,sBAAQN,MAAMC,UAAN,CAAiBK;AALJ,aAAhB,CAAP;AAOD,WARO,CAAR;AASD,SAVD,EAUGC,KAVH,CAUSlB,MAVT;AAWD,OApBM,CAAP;AAqBD;;;;;;IAGGS,K,GACJ,eAAYZ,IAAZ,EAAkBsB,UAAlB,EAA8B;AAAA;;AAC5BC,SAAOC,MAAP,CAAc,IAAd,EAAoB,EAACxB,UAAD,EAApB,EAA4BsB,UAA5B;AACD,C;;IAGkBG,Y;;;;;;;yBACdlC,K,EAAO;AACV,aAAO,IAAIW,OAAJ,CAAY,UAACR,OAAD,EAAUS,MAAV,EAAqB;AACtC,sCAAGlB,UAAUM,KAAb,EAAoBiB,IAApB,CAAyB,gBAAQ;AAC/B,cAAMkB,IAAI,kBAAQC,IAAR,CAAaC,IAAb,CAAV;AACA,cAAMC,OAAOH,EAAE,cAAF,EAAkBI,IAAlB,CAAuB,MAAvB,CAAb;;AAEA,cAAID,IAAJ,EACEnC,QAAQ,IAAIE,IAAJ,CAASiC,KAAK/B,KAAL,CAAW,GAAX,EAAgBG,GAAhB,EAAT,EAAgCV,KAAhC,CAAR,EADF,KAGEY,OAAO,IAAI4B,KAAJ,CAAU,oBAAV,CAAP;AACH,SARD;AASD,OAVM,CAAP;AAWD;;;;;;kBAbkBN,Y","file":"main.js","sourcesContent":["import qs from 'qs';\nimport url from 'url';\nimport cheerio from 'cheerio';\nimport rp from 'request-promise';\n\nconst baseURL = 'https://www.lonelyplanet.com/';\n\nfunction getEndpoint(id, type = 'sights', limit = 1000, offset = 0) {\n  const query = qs.stringify({\n    'filter[poi][poi_type][equals]': type,\n    'filter[poi][place_id][has_ancestor]': id,\n    'page[limit]': limit,\n    'page[offset]': offset,\n  }, {encode: false});\n\n  return url.resolve(baseURL, `a/poi-sig/${id}?resource=` + encodeURIComponent('/pois?' + query));\n}\n\nclass City {\n  constructor(id, query) {\n    let parts = query.split('/');\n\n    this.id = id;\n    this.country = parts[0];\n    this.city = parts.pop();\n  }\n\n  sights() {\n    return new Promise((resolve, reject) => {\n      const options = {\n        url: getEndpoint(this.id),\n        json: true,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      };\n\n      rp(options).then(result => {\n        resolve(result.data.map(sight => {\n          return new Sight(this, {\n            name: sight.attributes.name,\n            address: sight.attributes.address.street,\n            hours_string: sight.attributes.hours_string,\n            price_string: sight.attributes.price_string,\n            review: sight.attributes.review,\n          });\n        }));\n      }).catch(reject);\n    });\n  }\n}\n\nclass Sight {\n  constructor(city, parameters) {\n    Object.assign(this, {city}, parameters);\n  }\n}\n\nexport default class LonelyPlanet {\n  city(query) {\n    return new Promise((resolve, reject) => {\n      rp(baseURL + query).then(body => {\n        const $ = cheerio.load(body);\n        const href = $('.tours__more').attr('href');\n\n        if (href)\n          resolve(new City(href.split('/').pop(), query));\n        else\n          reject(new Error('href was not found'))\n      });\n    });\n  }\n}"]}